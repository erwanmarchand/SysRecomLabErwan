}
# correlation entre un vecteur v et chaque colonne dela matrice m
cor.vm <- function(v,m) {
m.centre <- t(t(m) - colMeans(m, na.rm=T))
v.centre <- v - mean(v, na.rm=T)
m.centre[is.na(m.centre)] <- 0
v.centre[is.na(v.centre)] <- 0
(v.centre %*% m.centre)/sqrt(colSums(m.centre^2) * sum(v.centre^2))
}
# Trouve les indexes des premières 'n' valeurs maximales d'une matrice
max.nindex <- function(m, n=5) {
i <- order(m, decreasing=TRUE)
return(i[1:n])
}
# Trouve les indexes des premières 'n' valeurs minimales d'une matrice
min.nindex <- function(m, n=5) {
i <- order(m)
return(i[1:n])
}
# Distance euclidienne entre un vecteur et les colonnes d'une matrice
distance.euclidienne <- function(v, m) {
sqrt(colSums((v - m)^2))
}
### Question 1
# cette fonction nous donne la moyenne des votes par profession
aggregate(v.u$rating, by=list(job=v.u$job), FUN=mean)
# cette fonction nous donne la moyenne des votes par âge
aggregate(v.u$rating, by=list(age=v.u$age), FUN=mean)
# Résultats cohérents : les moyennes sont plutot bonnes car les utilisateurs ont plus tendance à voter pour des films qu'ils apprécient
### Question 2
# on récupère les données correspondant au film considéré
startrek.id <- u.item[u.item$movie.title=='Star Trek V: The Final Frontier (1989)',]$movie.id
startrek.notes <- m.sparse[,startrek.id] # vecteur des notes de start trek de tous les utilisateurs
# on calcule les similitudes avec la méthode du cosinus
wcos <- cosinus.vm(startrek.notes, m.sparse)
filmsSimilairesCos <- max.nindex(wcos,11) # 11 car star trek va être dans la liste
filmsSimilairesCos <-filmsSimilairesCos[filmsSimilairesCos!=startrek.id] # On retire star trek de la liste
# on calcule les similitudes avec la méthode de la corrélation
wcor <- cor.vm(startrek.notes, m)
filmsSimilairesCor <- max.nindex(wcor,11) # 11 car star trek va être dans la liste
filmsSimilairesCor <-filmsSimilairesCor[filmsSimilairesCor!=startrek.id] # On retire star trek de la liste
# on affiche les résultats obtenues
u.item$movie.title[c(filmsSimilairesCos)]
u.item$movie.title[c(filmsSimilairesCor)]
# Résultats cohérents : les autres star trek figurent dans les deux listes, les films qui diffèrent ne sont
# en réalité pas très proches de Star Trek
### Question 3
# Recherche des 20 plus proches voisins en utilisant la distance euclidienne
n.voisins <- 20 + 1
distance.startrek <- distance.euclidienne(m.sparse[,startrek.id], m.sparse)
i.distance.startrek <- min.nindex(distance.startrek, n.voisins)
i.voisins <- i.distance.startrek[i.distance.startrek!=startrek.id] # indices des 20 plus proches voisins
# Calcul des valeurs centrées
m.centre <- t(t(m) - colMeans(m, na.rm=T))
wcos.voisins <- cosinus.vm(m.sparse[,startrek.id], m.sparse[,i.voisins])
results <- numeric(nb.users)
for(user.id in 1:nb.users) {
votes.no.na <- !is.na(m.centre[user.id,i.voisins]) # On ne prends en comptes que les votes que l'utilisateur a donné aux voisins
if(any(votes.no.na)) {
k <- 1/sum(abs(wcos.voisins[votes.no.na])) # constante de normalisation
results[user.id] <- mean(m[,startrek.id], na.rm=T) + k * (wcos.voisins[votes.no.na] %*% m.centre[user.id,i.voisins][votes.no.na])
} else {
results[user.id] <- NA # Si on a aucune vote sur les items voisins on ne peut pas calculer la note estimée
}
}
# on affiche les notes calculées
results
results[7] # note estimée de l'utilisateur 7
m[7,startrek.id] # vraie note de l'utilisateur 7
results[13] # note estimée de l'utilisateur 13
m[13,startrek.id] # vraie note de l'utilisateur 13
# Les résultats sont plutôt moyens, cela vient du fait qu'on utilise : m.centre[user.id,i.voisins][votes.no.na]
# qui ne contiennent la plupart du temps qu'une seule valeur, par exemple pour l'utilisateur 21 :
m[21,i.voisins]
### Question 4
# Pour calculer l'erreur quadratique il faut pouvoir observer la note que va finalement donner l'utilisateur
# L'erreur ne peut se calculer que sur les votes que l'on a.  Les valeurs manquantes sont ignorées lors du calcul.
erreur.quadratique <- function(estimation, realite) {
sqrt(mean((estimation - realite)^2, na.rm=T))
}
erreur.quadratique(results, m[,startrek.id])
# 0.80 est une erreur assez élevée pour une note entre 1 et 5, mais on ne se trompe pas de plus d'un point
### Question 5
# L'ensemble des films Star Wars
starWarsFilms <- u.item[grepl("*Star Wars*" ,u.item$movie.title) | u.item$movie.id==172 | u.item$movie.id==181,]
nrow(starWarsFilms)
# L'ensemble des films Star Trek
starTrekFilms <- u.item[grepl("*Star Trek*", u.item$movie.title),]
nrow(starTrekFilms)
# Il y a 8 films star trek et 3 film star wars
# Création de l'utilisateur considéré
new.user <- numeric(nb.items)
new.user[starWarsFilms$movie.id] = 1
new.user[starTrekFilms$movie.id] = 5
new.user[new.user==0] <- NA
# Recherche des 20 plus proches voisins selon la distance euclidienne
distance.new.user <- distance.euclidienne(new.user, t(m.sparse))
i.voisins <- min.nindex(distance.new.user, 20) # indices des 20 plus proches voisins
# Calcul des valeurs centrées (par rapport aux lignes cette fois)
m.centre <- m - rowMeans(m, na.rm=T)
wcor.voisins <- cosinus.vm(new.user, t(m[i.voisins,]))
results <- numeric(nb.items)
for(item.id in 1:nb.items) {
votes.no.na <- !is.na(m.centre[i.voisins,item.id])
if(any(votes.no.na)) {
k <- 1/sum(abs(wcor.voisins[votes.no.na])) # constante de normalisation
results[item.id] <- mean(new.user, na.rm=T) + k * (wcor.voisins[votes.no.na] %*% m.centre[i.voisins,item.id][votes.no.na])
} else {
results[item.id] <- NA
}
}
# On ne prend que les 10 meilleures notes
meilleurs.films <- max.nindex(results,10)
u.item$movie.title[c(meilleurs.films)]
rm(list = ls())
rm(list = ls())
library(Matrix)
u.data <- read.csv(file='u.data.csv', sep='|', header=T)
u.item <- read.csv(file='u.item.csv', sep='|', header=T)
u.user <- read.csv(file='u.user.csv', sep='|', header=T)
m.sparse <- sparseMatrix(u.data$user.id,u.data$item.id,x=u.data$rating)
rownames(m.sparse) <- paste('u', 1:nrow(m.sparse), sep='')
colnames(m.sparse) <- paste('i', 1:ncol(m.sparse), sep='')
m <- as.matrix(m.sparse)
m[m==0] <- NA
mx <- merge(u.user, u.data, 1)
meanPerJob <-aggregate(mx[, 7], list(mx$job), mean)
colnames(meanPerJob) <- c("job","mean Rating")
head(meanPerJob)
meanPerAge <-aggregate(mx[, 7], list(mx$age), mean)
colnames(meanPerAge) <- c("age","mean Rating")
head(meanPerAge)
cosinus.vm <- function(v,m) {
n <- sqrt(colSums(m^2))
return ((v %*% m)/(n * sqrt(sum(v^2))))
}
max.nindex <- function(m, n=5) {
i <- order(m, decreasing=TRUE)
return(i[1:n])
}
min.nindex <- function(m, n=5) {
i <- order(m)
return(i[1:n])
}
name.star.trek <- 'Star Trek V: The Final Frontier (1989)'
indice.star.trek <- u.item[u.item$movie.title==name.star.trek,]$movie.id
notes.star.trek <- m.sparse[,indice.star.trek]
wcos <- cosinus.vm(notes.star.trek , m.sparse)
similarMoviesCos.index <- max.nindex(wcos,11)
similarMoviesCos.index <- similarMoviesCos.index[similarMoviesCos.index!=indice.star.trek ]
similarMoviesCos.names <- u.item[similarMoviesCos.index,]$movie.title
similarMoviesCos.names <- data.frame(similarMoviesCos.names)
colnames(similarMoviesCos.names) <- c(paste("Most similar movies from",name.star.trek, sep = ' : '))
similarMoviesCos.names
wcor <- as.vector(cor(notes.star.trek, as.matrix(m.sparse)))
similarMoviesCor.index <- max.nindex(wcor,11)
similarMoviesCor.index <- similarMoviesCor.index[similarMoviesCor.index!=indice.star.trek ]
similarMoviesCor.names <- u.item[similarMoviesCor.index,]$movie.title
similarMoviesCor.names <- data.frame(similarMoviesCor.names)
colnames(similarMoviesCor.names) <- c(paste("Most similar movies from",name.star.trek, sep = ' : '))
similarMoviesCor.names
n.voisins <- 20 + 1
votes.communs <- (colSums((m.sparse[,indice.star.trek] * m.sparse) > 0))
distance.star.trek <- sqrt(colSums((m.sparse[,indice.star.trek] - m.sparse)^2))
i.distance.star.trek <- min.nindex(distance.star.trek, n.voisins)
i.distance.star.trek <- i.distance.star.trek[i.distance.star.trek!=indice.star.trek]
distance.star.trek[indice.star.trek]
temp <- as.matrix(votes.communs[i.distance.star.trek])
temp <- data.frame(temp)
colnames(temp) <- c("nombre de votes communs")
rownames(temp) <- u.item[gsub('i','',rownames(temp)),]$movie.title
temp
wcos.voisin <- t(as.matrix(cosinus.vm(m.sparse[,indice.star.trek], m.sparse[,i.distance.star.trek])))
m.sparse.star.trek.na <- as.matrix(m.sparse[which(is.na(m[,indice.star.trek])),i.distance.star.trek]) # on ne considere pas les utilisateurs ayant deja votés pour star trek
m.star.trek.na <- as.matrix(m.sparse.star.trek.na)
m.star.trek.na[m.star.trek.na==0] <- NA
wcos.sums.star.trek.na <- m.star.trek.na
wcos.sums.star.trek.na[!is.na(wcos.sums.star.trek.na)] <- 1
wcos.sums.star.trek.na[is.na(wcos.sums.star.trek.na)] <- 0
wcos.sums.star.trek.na <- abs(wcos.sums.star.trek.na %*% (as.matrix(wcos.voisin)))
wcos.sums.star.trek.na[wcos.sums.star.trek.na==0] <- NA
mean.star.trek = mean(m[,indice.star.trek], na.rm = TRUE)
means.voisins.na = colMeans(m.star.trek.na, na.rm = TRUE) # moyenne pour chaque voisin sans vote des utilisateurs ayant votés pour star trek
means.voisins.na[is.nan(means.voisins.na)] <- NA
temp <- t(t(m.star.trek.na)-means.voisins.na)
temp[is.na(temp)] <- 0
notes.star.trek.predicted.na <- temp%*%wcos.voisin/wcos.sums.star.trek.na
notes.star.trek.predicted.na[notes.star.trek.predicted.na == 0] <- NA
notes.star.trek.predicted.na <- mean.star.trek + notes.star.trek.predicted.na
notes.star.trek.predicted.na.no.na <- merge(rownames(notes.star.trek.predicted.na) [!is.na(notes.star.trek.predicted.na)], as.matrix(notes.star.trek.predicted.na[!is.na(as.matrix(notes.star.trek.predicted.na))]), by = "row.names")
colnames(notes.star.trek.predicted.na.no.na) <- c(" ","Identifiant utilisateur","vote prédit")
notes.star.trek.predicted.na.no.na[1] <- NULL
notes.star.trek.predicted.na.no.na
m.sparse.star.trek <- as.matrix(m.sparse[which(!is.na(m[,indice.star.trek])),i.distance.star.trek]) # on ne considere que les utilisateurs ayant deja votés pour star trek
m.star.trek <- as.matrix(m.sparse.star.trek)
m.star.trek[m.star.trek==0] <- NA
wcos.sums.star.trek <- m.star.trek
wcos.sums.star.trek[!is.na(wcos.sums.star.trek)] <- 1
wcos.sums.star.trek[is.na(wcos.sums.star.trek)] <- 0
wcos.sums.star.trek <- abs(wcos.sums.star.trek %*% (as.matrix(wcos.voisin)))
wcos.sums.star.trek[wcos.sums.star.trek==0] <- NA
means.voisins = colMeans(m.star.trek, na.rm = TRUE) # moyenne pour chaque voisin avec vote des utilisateurs ayant votés pour star trek
means.voisins[is.nan(means.voisins)] <- NA
temp <- t(t(m.star.trek)-means.voisins)
temp[is.na(temp)] <- 0
notes.star.trek.predicted <- temp%*%wcos.voisin/wcos.sums.star.trek
notes.star.trek.predicted[notes.star.trek.predicted == 0] <- NA
notes.star.trek.predicted <- mean.star.trek + notes.star.trek.predicted
notes.star.trek.predicted.no.na <- merge(as.matrix(notes.star.trek.predicted),as.matrix(notes.star.trek), by = "row.names")
colnames(notes.star.trek.predicted.no.na) <- c("Identifiant utilisateur","vote prédit","vote réel")
notes.star.trek.predicted.no.na <- na.omit(notes.star.trek.predicted.no.na)
rownames(notes.star.trek.predicted.no.na) <- NULL
notes.star.trek.predicted.no.na
erreur.quadratique <- sqrt(mean((notes.star.trek.predicted.no.na[,"vote prédit"] - notes.star.trek.predicted.no.na[,"vote réel"])^2, na.rm=TRUE))
erreur.quadratique
indices.star.trek <- grep("trek", as.character(u.item$movie.title), ignore.case=TRUE)
indices.star.wars <- c(172,181)
votes.new.user <- user.votes <- rep(0, ncol(m.sparse))
votes.new.user[indices.star.trek] <- 5
votes.new.user[indices.star.wars] <- 1
votes.communs.new.user <- (rowSums((votes.new.user * m.sparse) > 0))
distance.new.user <- sqrt(rowSums((votes.new.user - m.sparse)^2))
i.distance.new.user <- min.nindex(distance.new.user, 20) #pas besoin de supprimer notre utilisateur de cette liste car il n'apparait pas dans m.sparse
wcos.new.user.voisins <- as.vector(cosinus.vm(votes.new.user, t(m.sparse[i.distance.new.user,])))
m.sparse.new.user <- as.matrix(m.sparse[i.distance.new.user,])
m.new.user <- as.matrix(m.sparse.new.user)
m.new.user[m.new.user==0] <- NA
wcos.sums.new.user <- m.new.user
wcos.sums.new.user[!is.na(wcos.sums.new.user)] <- 1
wcos.sums.new.user[is.na(wcos.sums.new.user)] <- 0
wcos.sums.new.user <- abs(t(wcos.sums.new.user) %*% (as.matrix(wcos.new.user.voisins)))
wcos.sums.new.user[wcos.sums.new.user==0] <- NA
mean.new.user = mean(votes.new.user[votes.new.user>0], na.rm = TRUE)
means.voisins.new.user = rowMeans(m.new.user, na.rm = TRUE) # moyenne pour chaque voisin
means.voisins.new.user[is.nan(means.voisins.new.user)] <- NA
temp <- t(t(m.new.user)-means.voisins)
temp[is.na(temp)] <- 0
notes.new.user.predicted <- t(temp)%*%wcos.new.user.voisins/wcos.sums.new.user
notes.new.user.predicted[notes.new.user.predicted == 0] <- NA
notes.new.user.predicted <- mean.new.user + notes.new.user.predicted
indices.movies.recommended.new.user <- min.nindex(distance.new.user, 10)
title.movies.recommended.new.user <- as.matrix(u.item$movie.title[indices.movies.recommended.new.user])
title.movies.recommended.new.user <- data.frame(title.movies.recommended.new.user)
colnames(title.movies.recommended.new.user) <- c("Recommended movies")
title.movies.recommended.new.user
indices.movies.recommended.new.user <- min.nindex(distance.new.user, 10)
title.movies.recommended.new.user <- as.matrix(u.item$movie.title[indices.movies.recommended.new.user])
title.movies.recommended.new.user <- data.frame(title.movies.recommended.new.user)
colnames(title.movies.recommended.new.user) <- c("Recommended movies")
title.movies.recommended.new.user
rm(list = ls())
library(Matrix)
u.data <- read.csv(file='u.data.csv', sep='|', header=T)
u.item <- read.csv(file='u.item.csv', sep='|', header=T)
u.user <- read.csv(file='u.user.csv', sep='|', header=T)
m.sparse <- sparseMatrix(u.data$user.id,u.data$item.id,x=u.data$rating)
rownames(m.sparse) <- paste('u', 1:nrow(m.sparse), sep='')
colnames(m.sparse) <- paste('i', 1:ncol(m.sparse), sep='')
m <- as.matrix(m.sparse)
m[m==0] <- NA
mx <- merge(u.user, u.data, 1)
meanPerJob <-aggregate(mx[, 7], list(mx$job), mean)
colnames(meanPerJob) <- c("job","mean Rating")
head(meanPerJob)
meanPerAge <-aggregate(mx[, 7], list(mx$age), mean)
colnames(meanPerAge) <- c("age","mean Rating")
head(meanPerAge)
cosinus.vm <- function(v,m) {
n <- sqrt(colSums(m^2))
return ((v %*% m)/(n * sqrt(sum(v^2))))
}
max.nindex <- function(m, n=5) {
i <- order(m, decreasing=TRUE)
return(i[1:n])
}
min.nindex <- function(m, n=5) {
i <- order(m)
return(i[1:n])
}
name.star.trek <- 'Star Trek V: The Final Frontier (1989)'
indice.star.trek <- u.item[u.item$movie.title==name.star.trek,]$movie.id
notes.star.trek <- m.sparse[,indice.star.trek]
wcos <- cosinus.vm(notes.star.trek , m.sparse)
similarMoviesCos.index <- max.nindex(wcos,11)
similarMoviesCos.index <- similarMoviesCos.index[similarMoviesCos.index!=indice.star.trek ]
similarMoviesCos.names <- u.item[similarMoviesCos.index,]$movie.title
similarMoviesCos.names <- data.frame(similarMoviesCos.names)
colnames(similarMoviesCos.names) <- c(paste("Most similar movies from",name.star.trek, sep = ' : '))
similarMoviesCos.names
wcor <- as.vector(cor(notes.star.trek, as.matrix(m.sparse)))
similarMoviesCor.index <- max.nindex(wcor,11)
similarMoviesCor.index <- similarMoviesCor.index[similarMoviesCor.index!=indice.star.trek ]
similarMoviesCor.names <- u.item[similarMoviesCor.index,]$movie.title
similarMoviesCor.names <- data.frame(similarMoviesCor.names)
colnames(similarMoviesCor.names) <- c(paste("Most similar movies from",name.star.trek, sep = ' : '))
similarMoviesCor.names
n.voisins <- 20 + 1
votes.communs <- (colSums((m.sparse[,indice.star.trek] * m.sparse) > 0))
distance.star.trek <- sqrt(colSums((m.sparse[,indice.star.trek] - m.sparse)^2))
i.distance.star.trek <- min.nindex(distance.star.trek, n.voisins)
i.distance.star.trek <- i.distance.star.trek[i.distance.star.trek!=indice.star.trek]
distance.star.trek[indice.star.trek]
temp <- as.matrix(votes.communs[i.distance.star.trek])
temp <- data.frame(temp)
colnames(temp) <- c("nombre de votes communs")
rownames(temp) <- u.item[gsub('i','',rownames(temp)),]$movie.title
temp
wcos.voisin <- t(as.matrix(cosinus.vm(m.sparse[,indice.star.trek], m.sparse[,i.distance.star.trek])))
m.sparse.star.trek.na <- as.matrix(m.sparse[which(is.na(m[,indice.star.trek])),i.distance.star.trek]) # on ne considere pas les utilisateurs ayant deja votés pour star trek
m.star.trek.na <- as.matrix(m.sparse.star.trek.na)
m.star.trek.na[m.star.trek.na==0] <- NA
wcos.sums.star.trek.na <- m.star.trek.na
wcos.sums.star.trek.na[!is.na(wcos.sums.star.trek.na)] <- 1
wcos.sums.star.trek.na[is.na(wcos.sums.star.trek.na)] <- 0
wcos.sums.star.trek.na <- abs(wcos.sums.star.trek.na %*% (as.matrix(wcos.voisin)))
wcos.sums.star.trek.na[wcos.sums.star.trek.na==0] <- NA
mean.star.trek = mean(m[,indice.star.trek], na.rm = TRUE)
means.voisins.na = colMeans(m.star.trek.na, na.rm = TRUE) # moyenne pour chaque voisin sans vote des utilisateurs ayant votés pour star trek
means.voisins.na[is.nan(means.voisins.na)] <- NA
temp <- t(t(m.star.trek.na)-means.voisins.na)
temp[is.na(temp)] <- 0
notes.star.trek.predicted.na <- temp%*%wcos.voisin/wcos.sums.star.trek.na
notes.star.trek.predicted.na[notes.star.trek.predicted.na == 0] <- NA
notes.star.trek.predicted.na <- mean.star.trek + notes.star.trek.predicted.na
notes.star.trek.predicted.na.no.na <- merge(rownames(notes.star.trek.predicted.na) [!is.na(notes.star.trek.predicted.na)], as.matrix(notes.star.trek.predicted.na[!is.na(as.matrix(notes.star.trek.predicted.na))]), by = "row.names")
colnames(notes.star.trek.predicted.na.no.na) <- c(" ","Identifiant utilisateur","vote prédit")
notes.star.trek.predicted.na.no.na[1] <- NULL
notes.star.trek.predicted.na.no.na
m.sparse.star.trek <- as.matrix(m.sparse[which(!is.na(m[,indice.star.trek])),i.distance.star.trek]) # on ne considere que les utilisateurs ayant deja votés pour star trek
m.star.trek <- as.matrix(m.sparse.star.trek)
m.star.trek[m.star.trek==0] <- NA
wcos.sums.star.trek <- m.star.trek
wcos.sums.star.trek[!is.na(wcos.sums.star.trek)] <- 1
wcos.sums.star.trek[is.na(wcos.sums.star.trek)] <- 0
wcos.sums.star.trek <- abs(wcos.sums.star.trek %*% (as.matrix(wcos.voisin)))
wcos.sums.star.trek[wcos.sums.star.trek==0] <- NA
means.voisins = colMeans(m.star.trek, na.rm = TRUE) # moyenne pour chaque voisin avec vote des utilisateurs ayant votés pour star trek
means.voisins[is.nan(means.voisins)] <- NA
temp <- t(t(m.star.trek)-means.voisins)
temp[is.na(temp)] <- 0
notes.star.trek.predicted <- temp%*%wcos.voisin/wcos.sums.star.trek
notes.star.trek.predicted[notes.star.trek.predicted == 0] <- NA
notes.star.trek.predicted <- mean.star.trek + notes.star.trek.predicted
notes.star.trek.predicted.no.na <- merge(as.matrix(notes.star.trek.predicted),as.matrix(notes.star.trek), by = "row.names")
colnames(notes.star.trek.predicted.no.na) <- c("Identifiant utilisateur","vote prédit","vote réel")
notes.star.trek.predicted.no.na <- na.omit(notes.star.trek.predicted.no.na)
rownames(notes.star.trek.predicted.no.na) <- NULL
notes.star.trek.predicted.no.na
erreur.quadratique <- sqrt(mean((notes.star.trek.predicted.no.na[,"vote prédit"] - notes.star.trek.predicted.no.na[,"vote réel"])^2, na.rm=TRUE))
erreur.quadratique
indices.star.trek <- grep("trek", as.character(u.item$movie.title), ignore.case=TRUE)
indices.star.wars <- c(172,181)
votes.new.user <- user.votes <- rep(0, ncol(m.sparse))
votes.new.user[indices.star.trek] <- 5
votes.new.user[indices.star.wars] <- 1
votes.communs.new.user <- (rowSums((votes.new.user * m.sparse) > 0))
distance.new.user <- sqrt(rowSums((votes.new.user - m.sparse)^2))
i.distance.new.user <- min.nindex(distance.new.user, 20) #pas besoin de supprimer notre utilisateur de cette liste car il n'apparait pas dans m.sparse
wcos.new.user.voisins <- as.vector(cosinus.vm(votes.new.user, t(m.sparse[i.distance.new.user,])))
m.sparse.new.user <- as.matrix(m.sparse[i.distance.new.user,])
m.new.user <- as.matrix(m.sparse.new.user)
m.new.user[m.new.user==0] <- NA
wcos.sums.new.user <- m.new.user
wcos.sums.new.user[!is.na(wcos.sums.new.user)] <- 1
wcos.sums.new.user[is.na(wcos.sums.new.user)] <- 0
wcos.sums.new.user <- abs(t(wcos.sums.new.user) %*% (as.matrix(wcos.new.user.voisins)))
wcos.sums.new.user[wcos.sums.new.user==0] <- NA
mean.new.user = mean(votes.new.user[votes.new.user>0], na.rm = TRUE)
means.voisins.new.user = rowMeans(m.new.user, na.rm = TRUE) # moyenne pour chaque voisin
means.voisins.new.user[is.nan(means.voisins.new.user)] <- NA
temp <- t(t(m.new.user)-means.voisins)
temp[is.na(temp)] <- 0
notes.new.user.predicted <- t(temp)%*%wcos.new.user.voisins/wcos.sums.new.user
notes.new.user.predicted[notes.new.user.predicted == 0] <- NA
notes.new.user.predicted <- mean.new.user + notes.new.user.predicted
indices.movies.recommended.new.user <- min.nindex(distance.new.user, 10)
title.movies.recommended.new.user <- as.matrix(u.item$movie.title[indices.movies.recommended.new.user])
title.movies.recommended.new.user <- data.frame(title.movies.recommended.new.user)
colnames(title.movies.recommended.new.user) <- c("Recommended movies")
title.movies.recommended.new.user
table(m)
table(addNA(m))
rm(list = ls())
library(Matrix)
u.data <- read.csv(file='u.data.csv', sep='|', header=T)
u.item <- read.csv(file='u.item.csv', sep='|', header=T)
u.user <- read.csv(file='u.user.csv', sep='|', header=T)
m.sparse <- sparseMatrix(u.data$user.id,u.data$item.id,x=u.data$rating)
rownames(m.sparse) <- paste('u', 1:nrow(m.sparse), sep='')
colnames(m.sparse) <- paste('i', 1:ncol(m.sparse), sep='')
m <- as.matrix(m.sparse)
m[m==0] <- NA
mx <- merge(u.user, u.data, 1)
meanPerJob <-aggregate(mx[, 7], list(mx$job), mean)
colnames(meanPerJob) <- c("job","mean Rating")
head(meanPerJob)
meanPerAge <-aggregate(mx[, 7], list(mx$age), mean)
colnames(meanPerAge) <- c("age","mean Rating")
head(meanPerAge)
cosinus.vm <- function(v,m) {
n <- sqrt(colSums(m^2))
return ((v %*% m)/(n * sqrt(sum(v^2))))
}
max.nindex <- function(m, n=5) {
i <- order(m, decreasing=TRUE)
return(i[1:n])
}
min.nindex <- function(m, n=5) {
i <- order(m)
return(i[1:n])
}
name.star.trek <- 'Star Trek V: The Final Frontier (1989)'
indice.star.trek <- u.item[u.item$movie.title==name.star.trek,]$movie.id
notes.star.trek <- m.sparse[,indice.star.trek]
wcos <- cosinus.vm(notes.star.trek , m.sparse)
similarMoviesCos.index <- max.nindex(wcos,11)
similarMoviesCos.index <- similarMoviesCos.index[similarMoviesCos.index!=indice.star.trek ]
similarMoviesCos.names <- u.item[similarMoviesCos.index,]$movie.title
similarMoviesCos.names <- data.frame(similarMoviesCos.names)
colnames(similarMoviesCos.names) <- c(paste("Most similar movies from",name.star.trek, sep = ' : '))
similarMoviesCos.names
wcor <- as.vector(cor(notes.star.trek, as.matrix(m.sparse)))
similarMoviesCor.index <- max.nindex(wcor,11)
similarMoviesCor.index <- similarMoviesCor.index[similarMoviesCor.index!=indice.star.trek ]
similarMoviesCor.names <- u.item[similarMoviesCor.index,]$movie.title
similarMoviesCor.names <- data.frame(similarMoviesCor.names)
colnames(similarMoviesCor.names) <- c(paste("Most similar movies from",name.star.trek, sep = ' : '))
similarMoviesCor.names
n.voisins <- 20 + 1
votes.communs <- (colSums((m.sparse[,indice.star.trek] * m.sparse) > 0))
distance.star.trek <- sqrt(colSums((m.sparse[,indice.star.trek] - m.sparse)^2))
i.distance.star.trek <- min.nindex(distance.star.trek, n.voisins)
i.distance.star.trek <- i.distance.star.trek[i.distance.star.trek!=indice.star.trek]
distance.star.trek[indice.star.trek]
temp <- as.matrix(votes.communs[i.distance.star.trek])
temp <- data.frame(temp)
colnames(temp) <- c("nombre de votes communs")
rownames(temp) <- u.item[gsub('i','',rownames(temp)),]$movie.title
temp
wcos.voisin <- t(as.matrix(cosinus.vm(m.sparse[,indice.star.trek], m.sparse[,i.distance.star.trek])))
m.sparse.star.trek.na <- as.matrix(m.sparse[which(is.na(m[,indice.star.trek])),i.distance.star.trek]) # on ne considere pas les utilisateurs ayant deja votés pour star trek
m.star.trek.na <- as.matrix(m.sparse.star.trek.na)
m.star.trek.na[m.star.trek.na==0] <- NA
wcos.sums.star.trek.na <- m.star.trek.na
wcos.sums.star.trek.na[!is.na(wcos.sums.star.trek.na)] <- 1
wcos.sums.star.trek.na[is.na(wcos.sums.star.trek.na)] <- 0
wcos.sums.star.trek.na <- abs(wcos.sums.star.trek.na %*% (as.matrix(wcos.voisin)))
wcos.sums.star.trek.na[wcos.sums.star.trek.na==0] <- NA
mean.star.trek = mean(m[,indice.star.trek], na.rm = TRUE)
means.voisins.na = colMeans(m.star.trek.na, na.rm = TRUE) # moyenne pour chaque voisin sans vote des utilisateurs ayant votés pour star trek
means.voisins.na[is.nan(means.voisins.na)] <- NA
temp <- t(t(m.star.trek.na)-means.voisins.na)
temp[is.na(temp)] <- 0
notes.star.trek.predicted.na <- temp%*%wcos.voisin/wcos.sums.star.trek.na
notes.star.trek.predicted.na[notes.star.trek.predicted.na == 0] <- NA
notes.star.trek.predicted.na <- mean.star.trek + notes.star.trek.predicted.na
notes.star.trek.predicted.na.no.na <- merge(rownames(notes.star.trek.predicted.na) [!is.na(notes.star.trek.predicted.na)], as.matrix(notes.star.trek.predicted.na[!is.na(as.matrix(notes.star.trek.predicted.na))]), by = "row.names")
colnames(notes.star.trek.predicted.na.no.na) <- c(" ","Identifiant utilisateur","vote prédit")
notes.star.trek.predicted.na.no.na[1] <- NULL
notes.star.trek.predicted.na.no.na
m.sparse.star.trek <- as.matrix(m.sparse[which(!is.na(m[,indice.star.trek])),i.distance.star.trek]) # on ne considere que les utilisateurs ayant deja votés pour star trek
m.star.trek <- as.matrix(m.sparse.star.trek)
m.star.trek[m.star.trek==0] <- NA
wcos.sums.star.trek <- m.star.trek
wcos.sums.star.trek[!is.na(wcos.sums.star.trek)] <- 1
wcos.sums.star.trek[is.na(wcos.sums.star.trek)] <- 0
wcos.sums.star.trek <- abs(wcos.sums.star.trek %*% (as.matrix(wcos.voisin)))
wcos.sums.star.trek[wcos.sums.star.trek==0] <- NA
means.voisins = colMeans(m.star.trek, na.rm = TRUE) # moyenne pour chaque voisin avec vote des utilisateurs ayant votés pour star trek
means.voisins[is.nan(means.voisins)] <- NA
temp <- t(t(m.star.trek)-means.voisins)
temp[is.na(temp)] <- 0
notes.star.trek.predicted <- temp%*%wcos.voisin/wcos.sums.star.trek
notes.star.trek.predicted[notes.star.trek.predicted == 0] <- NA
notes.star.trek.predicted <- mean.star.trek + notes.star.trek.predicted
notes.star.trek.predicted.no.na <- merge(as.matrix(notes.star.trek.predicted),as.matrix(notes.star.trek), by = "row.names")
colnames(notes.star.trek.predicted.no.na) <- c("Identifiant utilisateur","vote prédit","vote réel")
notes.star.trek.predicted.no.na <- na.omit(notes.star.trek.predicted.no.na)
rownames(notes.star.trek.predicted.no.na) <- NULL
notes.star.trek.predicted.no.na
erreur.quadratique <- sqrt(mean((notes.star.trek.predicted.no.na[,"vote prédit"] - notes.star.trek.predicted.no.na[,"vote réel"])^2, na.rm=TRUE))
erreur.quadratique
indices.star.trek <- grep("trek", as.character(u.item$movie.title), ignore.case=TRUE)
indices.star.wars <- c(172,181)
votes.new.user <- user.votes <- rep(0, ncol(m.sparse))
votes.new.user[indices.star.trek] <- 5
votes.new.user[indices.star.wars] <- 1
votes.communs.new.user <- (rowSums((votes.new.user * m.sparse) > 0))
distance.new.user <- sqrt(rowSums((votes.new.user - m.sparse)^2))
i.distance.new.user <- min.nindex(distance.new.user, 20) #pas besoin de supprimer notre utilisateur de cette liste car il n'apparait pas dans m.sparse
wcos.new.user.voisins <- as.vector(cosinus.vm(votes.new.user, t(m.sparse[i.distance.new.user,])))
m.sparse.new.user <- as.matrix(m.sparse[i.distance.new.user,])
m.new.user <- as.matrix(m.sparse.new.user)
m.new.user[m.new.user==0] <- NA
wcos.sums.new.user <- m.new.user
wcos.sums.new.user[!is.na(wcos.sums.new.user)] <- 1
wcos.sums.new.user[is.na(wcos.sums.new.user)] <- 0
wcos.sums.new.user <- abs(t(wcos.sums.new.user) %*% (as.matrix(wcos.new.user.voisins)))
wcos.sums.new.user[wcos.sums.new.user==0] <- NA
mean.new.user = mean(votes.new.user[votes.new.user>0], na.rm = TRUE)
means.voisins.new.user = rowMeans(m.new.user, na.rm = TRUE) # moyenne pour chaque voisin
means.voisins.new.user[is.nan(means.voisins.new.user)] <- NA
temp <- t(t(m.new.user)-means.voisins)
temp[is.na(temp)] <- 0
notes.new.user.predicted <- t(temp)%*%wcos.new.user.voisins/wcos.sums.new.user
notes.new.user.predicted[notes.new.user.predicted == 0] <- NA
notes.new.user.predicted <- mean.new.user + notes.new.user.predicted
indices.movies.recommended.new.user <- min.nindex(distance.new.user, 10)
title.movies.recommended.new.user <- as.matrix(u.item$movie.title[indices.movies.recommended.new.user])
title.movies.recommended.new.user <- data.frame(title.movies.recommended.new.user)
colnames(title.movies.recommended.new.user) <- c("Recommended movies")
title.movies.recommended.new.user
