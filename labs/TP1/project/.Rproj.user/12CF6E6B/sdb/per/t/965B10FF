{
    "collab_server" : "",
    "contents" : "#### Recuperation des données\n\nrm(list = ls())\n\nlibrary(Matrix)\n\nu.data <- read.csv(file='u.data.csv', sep='|', header=T)\nu.item <- read.csv(file='u.item.csv', sep='|', header=T)\nu.user <- read.csv(file='u.user.csv', sep='|', header=T)\n\nm.sparse <- sparseMatrix(u.data$user.id,u.data$item.id,x=u.data$rating)\nrownames(m.sparse) <- paste('u', 1:nrow(m.sparse), sep='')\ncolnames(m.sparse) <- paste('i', 1:ncol(m.sparse), sep='')\n\nm <- as.matrix(m.sparse)\n\nm[m==0] <- NA\n\n\nmx <- merge(u.user, u.data, 1)\n\n#### 1) Quelle est la moyenne des votes par profession (\"job\") et par âge?\n\n## moyenne par profession\n\nmeanPerJob <-aggregate(mx[, 7], list(mx$job), mean)\ncolnames(meanPerJob) <- c(\"job\",\"mean Rating\")\n\n## moyenne par age\n\nmeanPerAge <-aggregate(mx[, 7], list(mx$age), mean)\ncolnames(meanPerAge) <- c(\"age\",\"mean Rating\")\n\n## moyenne par profession et age\n\nmeanPerProfessionAndAge <-aggregate(mx[, 7], list(mx$job,mx$age), mean)\ncolnames(meanPerProfessionAndAge) <- c(\"job\",\"age\",\"mean Rating\")\n\n\n#### 2) Quels sont les 10 films les plus similaires à \"Star Trek V: The Final Frontier (1989)\" selon respectivement la mesure du cosinus et de la corrélation avec la matrice de votes. \n\n## Cosinus entre un vecteur v et chaque colonne de la matrice m\ncosinus.vm <- function(v,m) { \n  n <- sqrt(colSums(m^2))\n  return ((v %*% m)/(n * sqrt(sum(v^2))))\n}\n\nmax.nindex <- function(m, n=5) {\n  i <- order(m, decreasing=TRUE)\n  return(i[1:n])\n}\n\nmin.nindex <- function(m, n=5) {\n  i <- order(m)\n  return(i[1:n])\n}\n\nname.star.trek <- 'Star Trek V: The Final Frontier (1989)'\nindice.star.trek <- u.item[u.item$movie.title==name.star.trek,]$movie.id\nnotes.star.trek <- m.sparse[,indice.star.trek]\n\nwcos <- cosinus.vm(notes.star.trek , m.sparse)\nsimilarMoviesCos.index <- max.nindex(wcos,11)\nsimilarMoviesCos.index <- similarMoviesCos.index[similarMoviesCos.index!=indice.star.trek ]\nsimilarMoviesCos.names <- u.item[similarMoviesCos.index,]$movie.title\nsimilarMoviesCos.names <- data.frame(similarMoviesCos.names)\ncolnames(similarMoviesCos.names) <- c(paste(\"Most similar movies from\",name.star.trek, sep = ' : '))\n\nwcor <- as.vector(cor(notes.star.trek, as.matrix(m.sparse)))\nsimilarMoviesCor.index <- max.nindex(wcor,11)\nsimilarMoviesCor.index <- similarMoviesCor.index[similarMoviesCor.index!=indice.star.trek ]\nsimilarMoviesCor.names <- u.item[similarMoviesCor.index,]$movie.title\nsimilarMoviesCor.names <- data.frame(similarMoviesCor.names)\ncolnames(similarMoviesCor.names) <- c(paste(\"Most similar movies from\",name.star.trek, sep = ' : '))\n\n\n#### 3) \n\n\nn.voisins <- 20 + 1\n\nvotes.communs <- (colSums((m.sparse[,indice.star.trek] * m.sparse) > 0))\ndistance.star.trek <- sqrt(colSums((m.sparse[,indice.star.trek] - m.sparse)^2))\ni.distance.star.trek <- min.nindex(distance.star.trek, n.voisins)\ni.distance.star.trek <- i.distance.star.trek[i.distance.star.trek!=indice.star.trek]\n\nwcos.voisin <- t(as.matrix(cosinus.vm(m.sparse[,indice.star.trek], m.sparse[,i.distance.star.trek])))\nm.sparse.star.trek.na <- as.matrix(m.sparse[which(is.na(m[,indice.star.trek])),i.distance.star.trek]) # on ne considere pas les utilisateurs ayant deja votés pour star trek\n\nm.star.trek.na <- as.matrix(m.sparse.star.trek.na)\nm.star.trek.na[m.star.trek.na==0] <- NA\n\nwcos.sums.star.trek.na <- m.star.trek.na\nwcos.sums.star.trek.na[!is.na(wcos.sums.star.trek.na)] <- 1\nwcos.sums.star.trek.na[is.na(wcos.sums.star.trek.na)] <- 0\nwcos.sums.star.trek.na <- abs(wcos.sums.star.trek.na %*% (as.matrix(wcos.voisin)))\nwcos.sums.star.trek.na[wcos.sums.star.trek.na==0] <- NA\n\nmean.star.trek = mean(m[,indice.star.trek], na.rm = TRUE)\n\nmeans.voisins.na = colMeans(m.star.trek.na, na.rm = TRUE) # moyenne pour chaque voisin sans vote des utilisateurs ayant votés pour star trek\nmeans.voisins.na[is.nan(means.voisins.na)] <- NA\n\ntemp <- t(t(m.star.trek.na)-means.voisins.na)\ntemp[is.na(temp)] <- 0\nnotes.star.trek.predicted.na <- temp%*%wcos.voisin/wcos.sums.star.trek.na\nnotes.star.trek.predicted.na[notes.star.trek.predicted.na == 0] <- NA\nnotes.star.trek.predicted.na <- mean.star.trek + notes.star.trek.predicted.na \n\nnotes.star.trek.predicted.na.no.na <- merge(rownames(notes.star.trek.predicted.na) [!is.na(notes.star.trek.predicted.na)], as.matrix(notes.star.trek.predicted.na[!is.na(as.matrix(notes.star.trek.predicted.na))]), by = \"row.names\")\n\ncolnames(notes.star.trek.predicted.na.no.na) <- c(\" \",\"Identifiant utilisateur\",\"vote prédit\")\nnotes.star.trek.predicted.na.no.na[1] <- NULL\nnotes.star.trek.predicted.na.no.na\n\n#### 4)\n\nm.sparse.star.trek <- as.matrix(m.sparse[which(!is.na(m[,indice.star.trek])),i.distance.star.trek]) # on ne considere que les utilisateurs ayant deja votés pour star trek\n\nm.star.trek <- as.matrix(m.sparse.star.trek)\nm.star.trek[m.star.trek==0] <- NA\n\nwcos.sums.star.trek <- m.star.trek\nwcos.sums.star.trek[!is.na(wcos.sums.star.trek)] <- 1\nwcos.sums.star.trek[is.na(wcos.sums.star.trek)] <- 0\nwcos.sums.star.trek <- abs(wcos.sums.star.trek %*% (as.matrix(wcos.voisin)))\nwcos.sums.star.trek[wcos.sums.star.trek==0] <- NA\n\nmeans.voisins = colMeans(m.star.trek, na.rm = TRUE) # moyenne pour chaque voisin avec vote des utilisateurs ayant votés pour star trek\nmeans.voisins[is.nan(means.voisins)] <- NA\n\ntemp <- t(t(m.star.trek)-means.voisins)\ntemp[is.na(temp)] <- 0\nnotes.star.trek.predicted <- temp%*%wcos.voisin/wcos.sums.star.trek \nnotes.star.trek.predicted[notes.star.trek.predicted == 0] <- NA\nnotes.star.trek.predicted <- mean.star.trek + notes.star.trek.predicted \n\nnotes.star.trek.predicted.no.na <- merge(as.matrix(notes.star.trek.predicted),as.matrix(notes.star.trek), by = \"row.names\")\n\ncolnames(notes.star.trek.predicted.no.na) <- c(\"Identifiant utilisateur\",\"prediction\",\"vote réel\")\n\nnotes.star.trek.predicted.no.na <- na.omit(notes.star.trek.predicted.no.na)\n\nerreur.quadratique <- sqrt(mean((notes.star.trek.predicted.no.na[,\"prediction\"] - notes.star.trek.predicted.no.na[,\"vote réel\"])^2, na.rm=TRUE))\n\n\n\n# 5\n\nindices.star.trek <- grep(\"trek\", as.character(u.item$movie.title), ignore.case=TRUE)\nindices.star.wars <- c(172,181)\n\nvotes.new.user <- user.votes <- rep(0, ncol(m.sparse))\nvotes.new.user[indices.star.trek] <- 5\nvotes.new.user[indices.star.wars] <- 1\n#votes.new.user[votes.new.user==0] <- NA\n\nvotes.communs.new.user <- (rowSums((votes.new.user * m.sparse) > 0))\ndistance.new.user <- sqrt(rowSums((votes.new.user - m.sparse)^2))\ni.distance.new.user <- min.nindex(distance.new.user, 20) #pas besoin de supprimer notre utilisateur de cette liste car il n'apparait pas dans m.sparse\n\nwcos.new.user.voisins <- as.vector(cosinus.vm(votes.new.user, t(m.sparse[i.distance.new.user,])))\n\nm.sparse.new.user <- as.matrix(m.sparse[i.distance.new.user,])\n\nm.new.user <- as.matrix(m.sparse.new.user)\nm.new.user[m.new.user==0] <- NA\n\nwcos.sums.new.user <- m.new.user\nwcos.sums.new.user[!is.na(wcos.sums.new.user)] <- 1\nwcos.sums.new.user[is.na(wcos.sums.new.user)] <- 0\nwcos.sums.new.user <- abs(t(wcos.sums.new.user) %*% (as.matrix(wcos.new.user.voisins)))\nwcos.sums.new.user[wcos.sums.new.user==0] <- NA\n\nmean.new.user = mean(votes.new.user[votes.new.user>0], na.rm = TRUE)\n\nmeans.voisins.new.user = rowMeans(m.new.user, na.rm = TRUE) # moyenne pour chaque voisin\nmeans.voisins.new.user[is.nan(means.voisins.new.user)] <- NA\n\ntemp <- t(t(m.new.user)-means.voisins)\ntemp[is.na(temp)] <- 0\n\nnotes.new.user.predicted <- t(temp)%*%wcos.new.user.voisins/wcos.sums.new.user\nnotes.new.user.predicted[notes.new.user.predicted == 0] <- NA\nnotes.new.user.predicted <- mean.new.user + notes.new.user.predicted\n\nindices.movies.recommended.new.user <- min.nindex(distance.new.user, 10)\nu.item$movie.title[indices.movies.recommended.new.user]\n",
    "created" : 1504705068909.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "42|29|45|0|\n47|32|50|0|\n52|32|55|0|\n",
    "hash" : "1643593958",
    "id" : "965B10FF",
    "lastKnownWriteTime" : 1505427298,
    "last_content_update" : 1505427298177,
    "path" : "C:/Users/erwan/Desktop/boulot/DESS/session 1/LOG6308/labs/TP1/project/recommandationsGroupLens.R",
    "project_path" : "recommandationsGroupLens.R",
    "properties" : {
        "docOutlineVisible" : "0",
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}